import asyncio
import io
import os
from dotenv import load_dotenv
from deepgram import (
    DeepgramClient,
    DeepgramClientOptions,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
    PrerecordedOptions,
)

# Load environment variables (e.g., Deepgram API key from .env file)
load_dotenv()

class TranscriptManager:
    """
    Collects and manages transcript fragments during streaming.
    """
    def __init__(self):
        self.fragments = []

    def add_fragment(self, text: str):
        self.fragments.append(text)

    def get_combined_transcript(self) -> str:
        return ' '.join(self.fragments).strip()

    def reset(self):
        self.fragments.clear()


class DeepgramSTT:
    """
    Deepgram Speech-to-Text client –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Deepgram STT –∫–ª–∏–µ–Ω—Ç–∞."""
        self.api_key = os.getenv("DEEPGRAM_API_KEY")
        if not self.api_key:
            raise ValueError("DEEPGRAM_API_KEY not found in environment variables")
        
        client_config = DeepgramClientOptions(options={"keepalive": "true"})
        self.client = DeepgramClient(self.api_key, client_config)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        self.prerecorded_options = PrerecordedOptions(
            model="nova-2",
            punctuate=True,
            language="en-US",
            smart_format=True,
            # –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
            diarize=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            utterances=True,  # –í–∫–ª—é—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
            paragraphs=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
            detect_language=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
            profanity_filter=False,
            redact=False,
            search=None,
            replace=None,
            keywords=None,
            version="latest",
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏
            multichannel=False,
            alternatives=1,
            numerals=True
        )
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ (–∏—Å–ø–æ–ª—å–∑—É–µ–º nova-2 —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        self.short_phrase_options = PrerecordedOptions(
            model="nova-2",
            punctuate=True,
            language="en-US",
            smart_format=True,
            utterances=True,
            detect_language=False,
            # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            filler_words=False,  # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã
            profanity_filter=False,
            redact=False,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
            multichannel=False,
            alternatives=1,
            numerals=True,
            diarize=False
        )
    
    async def transcribe_audio_bytes(self, audio_bytes: bytes) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ –±–∞–π—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑.
        
        Args:
            audio_bytes: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            audio_duration = self._estimate_audio_duration(audio_bytes)
            print(f"üéß Estimated audio duration: {audio_duration:.2f}s")
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ –∏–∑ –±–∞–π—Ç–æ–≤
            audio_source = {"buffer": audio_bytes}
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            configurations = [
                ("short_phrase", self.short_phrase_options),
                ("standard", self.prerecorded_options),
                ("minimal", self._get_minimal_options())
            ]
            
            transcript = ""
            for config_name, options in configurations:
                print(f"üîÑ Trying {config_name} configuration...")
                transcript = await self._try_transcription(audio_source, options)
                
                if transcript:
                    print(f"‚úÖ Success with {config_name} configuration")
                    break
                else:
                    print(f"‚ö†Ô∏è {config_name} configuration failed, trying next...")
            
            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if transcript:
                transcript = self._post_process_transcript(transcript)
                print(f"‚úÖ Final STT result: '{transcript}'")
            else:
                print("‚ö†Ô∏è All transcription attempts failed")
            
            return transcript
            
        except Exception as e:
            print(f"‚ùå STT transcription error: {e}")
            return ""
    
    def _get_minimal_options(self) -> PrerecordedOptions:
        """
        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        return PrerecordedOptions(
            model="nova-2",
            language="en-US",
            punctuate=True
        )
    
    def _estimate_audio_duration(self, audio_bytes: bytes) -> float:
        """
        –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ.
        –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.
        """
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: WebM Opus ~16kbps –¥–ª—è —Ä–µ—á–∏
        estimated_duration = len(audio_bytes) / (16000 / 8)  # –±–∞–π—Ç/—Å–µ–∫
        return max(0.1, min(estimated_duration, 30.0))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0.1 –¥–æ 30 —Å–µ–∫
    
    
    async def _try_transcription(self, audio_source: dict, options: PrerecordedOptions) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        """
        try:
            response = await self.client.listen.asyncprerecorded.v("1").transcribe_file(
                audio_source,
                options
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if (response.results and
                response.results.channels and
                len(response.results.channels) > 0 and
                response.results.channels[0].alternatives and
                len(response.results.channels[0].alternatives) > 0):
                
                transcript = response.results.channels[0].alternatives[0].transcript
                return transcript.strip()
            
            return ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è Transcription attempt failed: {e}")
            return ""
    
    def _post_process_transcript(self, transcript: str) -> str:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.
        """
        if not transcript:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        transcript = ' '.join(transcript.split())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
        transcript = self._fix_truncated_first_word(transcript)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
        corrections = {
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
            'yeah': 'yes',
            'yep': 'yes',
            'nope': 'no',
            'uh huh': 'yes',
            'mm hmm': 'yes',
            'uh uh': 'no',
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
            'react': 'React',
            'javascript': 'JavaScript',
            'typescript': 'TypeScript',
            'node': 'Node',
            'angular': 'Angular',
            'vue': 'Vue'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ (–¥–æ 5 —Å–ª–æ–≤)
        words = transcript.split()
        if len(words) <= 5:
            transcript_lower = transcript.lower()
            for wrong, correct in corrections.items():
                if transcript_lower == wrong or transcript_lower.startswith(wrong + ' ') or transcript_lower.endswith(' ' + wrong):
                    transcript = transcript_lower.replace(wrong, correct)
                    break
        
        return transcript
    
    def _fix_truncated_first_word(self, transcript: str) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ.
        """
        if not transcript:
            return transcript
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
        truncation_fixes = {
            # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        
            'eact': 'React',
            'avaScript': 'JavaScript',
            'ypeScript': 'TypeScript',
            'ode': 'Node',
            'ngular': 'Angular',
            'ue': 'Vue'
        }
        
        words = transcript.split()
        if words:
            first_word = words[0].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if first_word in truncation_fixes:
                words[0] = truncation_fixes[first_word]
                return ' '.join(words)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤ (–¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(first_word) <= 4:
                for truncated, full in truncation_fixes.items():
                    if first_word == truncated.lower():
                        words[0] = full
                        return ' '.join(words)
        
        return transcript
    
    async def transcribe_audio_file(self, file_path: str) -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            with open(file_path, 'rb') as audio_file:
                audio_bytes = audio_file.read()
                return await self.transcribe_audio_bytes(audio_bytes)
                
        except Exception as e:
            print(f"STT file transcription error: {e}")
            return ""

async def transcribe_from_microphone():
    """
    Streams audio from the microphone to Deepgram and prints transcripts live.
    """
    try:
        client_config = DeepgramClientOptions(options={"keepalive": "true"})
        dg_client = DeepgramClient("", client_config)
        dg_stream = dg_client.listen.asynclive.v("1")

        transcript_manager = TranscriptManager()
        terminate_event = asyncio.Event()

        async def handle_transcript(_, result, **kwargs):
            if not result.channel.alternatives:
                return
            text = result.channel.alternatives[0].transcript.strip()

            if not text:
                return  # Skip empty transcripts

            if not result.speech_final:
                transcript_manager.add_fragment(text)
            else:
                transcript_manager.add_fragment(text)
                full_text = transcript_manager.get_combined_transcript()
                if full_text:  # Only print if there's actual speech
                    print(f"Speaker: {full_text}")

                    if "goodbye" in full_text.lower():
                        terminate_event.set()
                transcript_manager.reset()

        async def handle_error(_, error, **kwargs):
            print(f"[Error] {error}")

        dg_stream.on(LiveTranscriptionEvents.Transcript, handle_transcript)
        dg_stream.on(LiveTranscriptionEvents.Error, handle_error)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∂–∏–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
        options = LiveOptions(
            model="nova-2",
            punctuate=True,
            language="en-US",
            encoding="linear16",
            channels=1,
            sample_rate=16000,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
            endpointing=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏ (–º—Å) - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
            vad_events=True,  # –í–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
            interim_results=True,  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            utterance_end_ms=1500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
            vad_turnoff=250,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º VAD - –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–µ—á–∏
            smart_format=True,  # –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            profanity_filter=False,
            redact=False,
            diarize=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            multichannel=False,
            alternatives=1,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            numerals=True,  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–∞ –≤ —Ü–∏—Ñ—Ä—ã
            search=None,
            replace=None,
            keywords=None
        )

        await dg_stream.start(options)

        mic = Microphone(dg_stream.send)
        mic.start()
        
        print()
        print("Listening.......")
        print("Say 'goodbye' to end the session.")
        print()

        while mic.is_active() and not terminate_event.is_set():
            await asyncio.sleep(0.5)

        mic.finish()
        await dg_stream.finish()
        print("Session ended.")

    except Exception as ex:
        print(f"An error occurred: {ex}")

if __name__ == "__main__":
    asyncio.run(transcribe_from_microphone())
