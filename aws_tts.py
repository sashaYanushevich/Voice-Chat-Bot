import asyncio
import re
import subprocess
import time
from typing import List, Optional
import io
import os

import boto3
from botocore.exceptions import ClientError, NoCredentialsError


class AWSPollyTTS:
    """AWS Polly TTS —Å chunking –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
    
    def __init__(self, 
                 voice_id: str = "Joanna",
                 region_name: str = "us-east-1",
                 chunk_size: int = 300):
        """
        Args:
            voice_id: –ì–æ–ª–æ—Å AWS Polly (Joanna, Matthew, Salli –∏ —Ç.–¥.)
            region_name: AWS —Ä–µ–≥–∏–æ–Ω
            chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        """
        self.voice_id = voice_id
        self.chunk_size = chunk_size
        
        try:
            self.polly_client = boto3.client('polly', region_name=region_name)
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.polly_client.describe_voices()
        except (ClientError, NoCredentialsError) as e:
            print(f"‚ùå AWS Polly error: {e}")
            print("üí° Make sure AWS credentials are configured:")
            print("   aws configure")
            print("   or set environment variables:")
            print("   AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY")
            raise
    
    def split_text_into_chunks(self, text: str) -> List[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        sentences = re.split(r'[.!?]+\s*', text.strip())
        sentences = [s.strip() for s in sentences if s.strip()]
        
        chunks = []
        current_chunk = ""
        
        for sentence in sentences:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(sentence) > self.chunk_size:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if current_chunk:
                    chunks.append(current_chunk.strip())
                    current_chunk = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º
                parts = sentence.split(', ')
                for part in parts:
                    if len(current_chunk + part) > self.chunk_size:
                        if current_chunk:
                            chunks.append(current_chunk.strip())
                        current_chunk = part + ", "
                    else:
                        current_chunk += part + ", "
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                if len(current_chunk + sentence) > self.chunk_size:
                    if current_chunk:
                        chunks.append(current_chunk.strip())
                    current_chunk = sentence + ". "
                else:
                    current_chunk += sentence + ". "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk.strip():
            chunks.append(current_chunk.strip())
        
        return chunks
    
    async def synthesize_chunk(self, text: str) -> Optional[bytes]:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ.
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: self.polly_client.synthesize_speech(
                    Text=text,
                    OutputFormat='mp3',
                    VoiceId=self.voice_id,
                    Engine='neural'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º neural engine –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                )
            )
            
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            audio_data = response['AudioStream'].read()
            return audio_data
            
        except Exception as e:
            print(f"‚ùå Chunk synthesis error: {e}")
            return None
    
    def play_audio_chunk(self, audio_data: bytes):
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ —á–∞–Ω–∫ —á–µ—Ä–µ–∑ ffplay.
        """
        try:
            player_command = ["ffplay", "-autoexit", "-", "-nodisp", "-loglevel", "quiet"]
            player_process = subprocess.Popen(
                player_command,
                stdin=subprocess.PIPE,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
            )
            
            player_process.stdin.write(audio_data)
            player_process.stdin.close()
            player_process.wait()
            
        except Exception as e:
            print(f"‚ùå Playback error: {e}")
    
    async def speak(self, text: str):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–∫—Å—Ç —Å chunking –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        """
        if not text.strip():
            return
        
        start_time = time.time()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
        chunks = self.split_text_into_chunks(text)
        print(f"üé§ Split into {len(chunks)} chunks")
        
        # –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤
        audio_queue = asyncio.Queue(maxsize=3)  # –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –¥–æ 3 —á–∞–Ω–∫–æ–≤
        
        # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞
        synthesis_done = asyncio.Event()
        
        async def synthesizer():
            """–ö–æ—Ä—É—Ç–∏–Ω –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —á–∞–Ω–∫–æ–≤."""
            try:
                for i, chunk in enumerate(chunks):
                    print(f"üîÑ Synthesizing chunk {i+1}/{len(chunks)}: {chunk[:50]}...")
                    audio_data = await self.synthesize_chunk(chunk)
                    if audio_data:
                        await audio_queue.put(audio_data)
                    else:
                        print(f"‚ö†Ô∏è  Skipped chunk {i+1}")
            except Exception as e:
                print(f"‚ùå Synthesizer error: {e}")
            finally:
                synthesis_done.set()
        
        async def player():
            """–ö–æ—Ä—É—Ç–∏–Ω –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤."""
            try:
                chunk_count = 0
                while True:
                    try:
                        # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        audio_data = await asyncio.wait_for(audio_queue.get(), timeout=1.0)
                        chunk_count += 1
                        
                        print(f"üîä Playing chunk {chunk_count}")
                        
                        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        loop = asyncio.get_event_loop()
                        await loop.run_in_executor(None, self.play_audio_chunk, audio_data)
                        
                        audio_queue.task_done()
                        
                    except asyncio.TimeoutError:
                        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ —Å–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω - –≤—ã—Ö–æ–¥–∏–º
                        if synthesis_done.is_set() and audio_queue.empty():
                            break
                        continue
                        
            except Exception as e:
                print(f"‚ùå Player error: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        synthesis_task = asyncio.create_task(synthesizer())
        playback_task = asyncio.create_task(player())
        
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
        await asyncio.gather(synthesis_task, playback_task)
        
        total_time = time.time() - start_time
        print(f"‚úÖ TTS –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {total_time:.1f}—Å ({len(chunks)} —á–∞–Ω–∫–æ–≤)")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
async def test_polly():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AWS Polly TTS."""
    try:
        tts = AWSPollyTTS(voice_id="Joanna")
        
        test_text = """
        –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AWS Polly —Å chunking —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π. 
        –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ. 
        –ü–æ–∫–∞ –æ–¥–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –¥—Ä—É–≥–∏–µ —É–∂–µ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
        –≠—Ç–æ –¥–∞—ë—Ç –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–µ–Ω—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É!
        """
        
        print("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç AWS Polly...")
        await tts.speak(test_text)
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_polly()) 