import asyncio
import json
import base64
import os
import time
import io
from typing import Dict, List
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, UploadFile, File, Form
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
import uvicorn
from dotenv import load_dotenv
import PyPDF2
from docx import Document
from fastapi.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from speech_to_text import DeepgramSTT
from llm import OpenRouterClient
from aws_tts import AWSPollyTTS

load_dotenv()

app = FastAPI(title="Voice Bot API", description="Real-time voice chat bot")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

class VoiceBotWebSocket:
    """WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.user_sessions: Dict[str, dict] = {}
        self.cv_sessions: Dict[str, dict] = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è CV —Å–µ—Å—Å–∏–π
        self.user_llm_clients: Dict[str, OpenRouterClient] = {}  # –û—Ç–¥–µ–ª—å–Ω—ã–π LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_timeout_tasks: Dict[str, asyncio.Task] = {}  # –ó–∞–¥–∞—á–∏ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_timeout_active: Dict[str, bool] = {}  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_timeout_stage: Dict[str, int] = {}  # –°—Ç–∞–¥–∏—è —Ç–∞–π–º–∞—É—Ç–∞ (0, 1, 2)
        self.timeout_responses = {
            1: [  # –ü–µ—Ä–≤–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ (5 —Å–µ–∫)
                "I didn't catch your response ‚Äî would you like me to repeat the question?",
                "Are you still there?",
                "I'm waiting for your response. Are you ready to continue?"
            ],
            2: [  # –í—Ç–æ—Ä–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ (10 —Å–µ–∫)
                "Should I continue with the next question?",
                "Let me know when you're ready to proceed.",
                "Are you having any technical difficulties?"
            ],
            3: [  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ (10 —Å–µ–∫)
                "I think we're having connection issues. Thank you for your time, and we'll be in touch soon.",
                "It seems we've lost connection. We'll contact you to reschedule the interview.",
                "Thank you for your interest. We'll reach out to you regarding next steps."
            ]
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        try:
            print("üîß Initializing STT...")
            self.stt = DeepgramSTT()
            print("‚úÖ STT initialized")
            
            print("üîß Initializing TTS...")
            self.tts = AWSPollyTTS(voice_id="Ruth", engine="generative", chunk_size=200)
            print("‚úÖ TTS initialized")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            print("üîß Loading system prompt...")
            self.system_prompt = self._load_system_prompt()
            print("‚úÖ System prompt loaded")
            
        except Exception as e:
            print(f"‚ùå Initialization error: {e}")
            import traceback
            traceback.print_exc()
            raise
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        try:
            with open("Bot_prompt.txt", 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            return "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    
    def _extract_pdf_text(self, pdf_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
            pdf_stream = io.BytesIO(pdf_data)
            
            # –ß–∏—Ç–∞–µ–º PDF
            pdf_reader = PyPDF2.PdfReader(pdf_stream)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            text_content = ""
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text_content += page.extract_text() + "\n"
            
            return text_content.strip()
            
        except Exception as e:
            print(f"‚ùå PDF extraction error: {e}")
            return None
    
    def _extract_docx_text(self, docx_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX
            docx_stream = io.BytesIO(docx_data)
            
            # –ß–∏—Ç–∞–µ–º DOCX
            doc = Document(docx_stream)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            text_content = ""
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text_content += paragraph.text + "\n"
            
            # –¢–∞–∫–∂–µ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        if cell.text.strip():
                            text_content += cell.text + " "
                    text_content += "\n"
            
            return text_content.strip()
            
        except Exception as e:
            print(f"‚ùå DOCX extraction error: {e}")
            return None
    
    def cleanup_old_cv_sessions(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ CV —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
        current_time = time.time()
        old_sessions = []
        
        for session_id, session_data in self.cv_sessions.items():
            if current_time - session_data.get("uploaded_at", 0) > 3600:  # 1 —á–∞—Å
                old_sessions.append(session_id)
        
        for session_id in old_sessions:
            del self.cv_sessions[session_id]
            print(f"üßπ Cleaned up old CV session: {session_id}")
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ LLM –∫–ª–∏–µ–Ω—Ç—ã
        inactive_users = []
        for user_id in self.user_llm_clients.keys():
            if user_id not in self.active_connections:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            self.user_llm_clients[user_id].clear_history()
            del self.user_llm_clients[user_id]
            print(f"üßπ Cleaned up inactive LLM client for user: {user_id}")
        
        return len(old_sessions)
    
    def get_user_llm_client(self, user_id: str) -> OpenRouterClient:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_llm_clients:
            print(f"üîß Creating new LLM client for user {user_id}")
            self.user_llm_clients[user_id] = OpenRouterClient()
        return self.user_llm_clients[user_id]
    
    async def start_response_timeout(self, user_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä
        if self.user_timeout_active.get(user_id, False):
            print(f"‚è∞ Timeout already active for {user_id}, skipping")
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.user_timeout_tasks:
            self.user_timeout_tasks[user_id].cancel()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é
        self.user_timeout_active[user_id] = True
        self.user_timeout_stage[user_id] = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (–ø–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è - 5 —Å–µ–∫—É–Ω–¥)
        self.user_timeout_tasks[user_id] = asyncio.create_task(
            self._timeout_handler(user_id)
        )
    
    async def cancel_response_timeout(self, user_id: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ —Å—Ç–∞–¥–∏—é
        self.user_timeout_active[user_id] = False
        self.user_timeout_stage[user_id] = 0
        
        if user_id in self.user_timeout_tasks:
            self.user_timeout_tasks[user_id].cancel()
            del self.user_timeout_tasks[user_id]
    
    async def _timeout_handler(self, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ —Å —Ç—Ä–µ–º—è —Å—Ç–∞–¥–∏—è–º–∏"""
        try:
            stage = self.user_timeout_stage.get(user_id, 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏
            if stage == 1:
                wait_time = 15.0  # –ü–µ—Ä–≤–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
            elif stage == 2:
                wait_time = 25.0  # –í—Ç–æ—Ä–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
            else:  # stage == 3
                wait_time = 30.0  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
            
            print(f"‚è∞ Starting timeout stage {stage} for {user_id} (waiting {wait_time}s)")
            await asyncio.sleep(wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not self.user_timeout_active.get(user_id, False):
                return
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
            import random
            timeout_message = random.choice(self.timeout_responses[stage])
            
            print(f"‚è∞ Timeout stage {stage} for user {user_id}: {timeout_message}")
            
            await self.send_message(user_id, {
                "type": "bot_text",
                "text": timeout_message
            })
            
            # –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
            if stage == 3:
                await self.send_message(user_id, {
                    "type": "status",
                    "message": "üîä HR is ending the interview..."
                })
            else:
                await self.send_message(user_id, {
                    "type": "status",
                    "message": "üîä HR is prompting you..."
                })
            
            await self._synthesize_and_send_audio(user_id, timeout_message)
            
            if stage == 3:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
                await self.send_message(user_id, {
                    "type": "interview_ended",
                    "message": "üîö Interview ended due to no response"
                })
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"üîö Ending interview for {user_id} due to no response")
                self.disconnect(user_id)
                return
            else:
                await self.send_message(user_id, {
                    "type": "completed",
                    "message": "‚úÖ Ready for your response"
                })
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏
            self.user_timeout_stage[user_id] = stage + 1
            
            # –í–ê–ñ–ù–û: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ audio_playback_complete
            # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–∫–∞ –∏–≥—Ä–∞–µ—Ç timeout —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        except asyncio.CancelledError:
            # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è)
            self.user_timeout_active[user_id] = False
            self.user_timeout_stage[user_id] = 0
        except Exception as e:
            print(f"‚ùå Timeout handler error for {user_id}: {e}")
            self.user_timeout_active[user_id] = False
            self.user_timeout_stage[user_id] = 0
    
    async def connect(self, websocket: WebSocket, user_id: str, session_id: str = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await websocket.accept()
        self.active_connections[user_id] = websocket
        self.user_sessions[user_id] = {
            "conversation_history": [],
            "connected_at": time.time(),
            "cv_text": None,
            "candidate_info": None
        }
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
        self.cleanup_old_cv_sessions()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ CV –µ—Å–ª–∏ –µ—Å—Ç—å session_id
        if session_id and session_id in self.cv_sessions:
            session_data = self.cv_sessions[session_id]
            self.user_sessions[user_id]["cv_text"] = session_data["cv_text"]
            self.user_sessions[user_id]["candidate_info"] = session_data["candidate_info"]
            
            candidate = session_data["candidate_info"]
            print(f"üìÑ Loaded CV data for {candidate['firstName']} {candidate['lastName']}")
        
        await self.send_message(user_id, {
            "type": "connected",
            "message": "üé§ HR Interview starting!"
        })
        
        print(f"‚úÖ User {user_id} connected")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        await self.start_interview(user_id)
    
    async def start_interview(self, user_id: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º HR"""
        try:
            print(f"üé¨ Starting automatic interview for {user_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HR
            greeting_prompt = "Start the interview exactly as instructed in the prompt. Follow the 'Begin with:' instruction precisely."
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å CV –∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            enhanced_prompt = self.system_prompt
            if user_id in self.user_sessions:
                session = self.user_sessions[user_id]
                if session.get("cv_text") or session.get("candidate_info"):
                    enhanced_prompt = f"""{self.system_prompt}

CANDIDATE INFORMATION:"""
                    
                    if session.get("candidate_info"):
                        candidate = session["candidate_info"]
                        enhanced_prompt += f"""
Name: {candidate.get('firstName', '')} {candidate.get('lastName', '')}
Email: {candidate.get('email', '')}"""
                    
                    if session.get("cv_text"):
                        enhanced_prompt += f"""

CV CONTENT:
{session['cv_text']}"""
                    
                    enhanced_prompt += """

Use this information to conduct a personalized interview, asking relevant questions based on their CV and experience.

CRITICAL: Keep response under 30 words. Be extremely brief and direct."""
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_llm = self.get_user_llm_client(user_id)
            bot_response = await user_llm.chat_completion(greeting_prompt, enhanced_prompt)
            print(f"ü§ñ HR greeting to {user_id}: {bot_response}")
            
            await self.send_message(user_id, {
                "type": "bot_text", 
                "text": bot_response
            })
            
            # –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await self.send_message(user_id, {
                "type": "status",
                "message": "üîä HR is greeting you..."
            })
            
            await self._synthesize_and_send_audio(user_id, bot_response)
            
            await self.send_message(user_id, {
                "type": "completed",
                "message": "‚úÖ Ready to hear your response"
            })
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–¥–µ—Å—å - –∂–¥–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            # await self.start_response_timeout(user_id)
            
        except Exception as e:
            print(f"‚ùå Error starting interview for {user_id}: {e}")
            await self.send_message(user_id, {
                "type": "error",
                "message": "‚ùå Error starting interview"
            })
    
    def disconnect(self, user_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.active_connections:
            del self.active_connections[user_id]
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        if user_id in self.user_llm_clients:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            self.user_llm_clients[user_id].clear_history()
            del self.user_llm_clients[user_id]
            print(f"üßπ Cleared LLM client for user {user_id}")
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.user_timeout_tasks:
            self.user_timeout_tasks[user_id].cancel()
            del self.user_timeout_tasks[user_id]
            print(f"üßπ Cancelled timeout task for user {user_id}")
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ç–∞–π–º–∞—É—Ç–∞
        if user_id in self.user_timeout_active:
            del self.user_timeout_active[user_id]
        if user_id in self.user_timeout_stage:
            del self.user_timeout_stage[user_id]
        print(f"‚ùå User {user_id} disconnected")
    
    async def send_message(self, user_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.active_connections:
            try:
                await self.active_connections[user_id].send_text(json.dumps(message, ensure_ascii=False))
            except Exception as e:
                print(f"‚ùå Send error to {user_id}: {e}")
                self.disconnect(user_id)
    
    async def process_audio(self, user_id: str, audio_data: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"üé¨ Starting audio processing for {user_id}")
        try:
            # 1. STT - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            print(f"üéß Starting STT for {user_id}")
            await self.send_message(user_id, {
                "type": "status",
                "message": "üéß Recognizing speech..."
            })
            
            user_text = await self.stt.transcribe_audio_bytes(audio_data)
            print(f"üéß STT result for {user_id}: '{user_text}'")
            
            if not user_text.strip():
                print(f"‚ö†Ô∏è Empty STT result for {user_id} - ignoring, keeping timeout active")
                await self.send_message(user_id, {
                    "type": "status",
                    "message": "üéß Could not recognize speech, please try again"
                })
                # –ù–ï –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            await self.cancel_response_timeout(user_id)
            
            print(f"üë§ User {user_id}: {user_text}")
            
            await self.send_message(user_id, {
                "type": "user_text",
                "text": user_text
            })
            
            # 2. LLM - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(f"üß† Starting LLM for {user_id}")
            await self.send_message(user_id, {
                "type": "status",
                "message": "üß† Thinking about response..."
            })
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å CV –∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            enhanced_prompt = self.system_prompt
            if user_id in self.user_sessions:
                session = self.user_sessions[user_id]
                if session.get("cv_text") or session.get("candidate_info"):
                    enhanced_prompt = f"""{self.system_prompt}

CANDIDATE INFORMATION:"""
                    
                    if session.get("candidate_info"):
                        candidate = session["candidate_info"]
                        enhanced_prompt += f"""
Name: {candidate.get('firstName', '')} {candidate.get('lastName', '')}
Email: {candidate.get('email', '')}"""
                    
                    if session.get("cv_text"):
                        enhanced_prompt += f"""

CV CONTENT:
{session['cv_text']}"""
                    
                    enhanced_prompt += """

Use this information to conduct a personalized interview, asking relevant questions based on their CV and experience.

CRITICAL: Keep response under 30 words. Be extremely brief and direct."""
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_llm = self.get_user_llm_client(user_id)
                bot_response = await user_llm.chat_completion(user_text, enhanced_prompt)
            
            print(f"üß† LLM result for {user_id}: '{bot_response}'")
            
            print(f"ü§ñ Bot to {user_id}: {bot_response}")
            
            await self.send_message(user_id, {
                "type": "bot_text",
                "text": bot_response
            })
            
            # 3. TTS - –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            print(f"üîä Starting TTS for {user_id}")
            await self.send_message(user_id, {
                "type": "status",
                "message": "üîä Generating speech..."
            })
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await self._synthesize_and_send_audio(user_id, bot_response)
            
            await self.send_message(user_id, {
                "type": "completed",
                "message": "‚úÖ Ready for next question"
            })
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–¥–µ—Å—å - –∂–¥–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            # await self.start_response_timeout(user_id)
            
            print(f"‚úÖ Audio processing completed for {user_id}")
            
        except Exception as e:
            print(f"‚ùå Process error for {user_id}: {e}")
            import traceback
            traceback.print_exc()
            await self.send_message(user_id, {
                "type": "error",
                "message": f"‚ùå Processing error: {str(e)}"
            })
    
    async def _synthesize_and_send_audio(self, user_id: str, text: str):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞–Ω–∫–æ–≤"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            chunks = self.tts.split_text_into_chunks(text)
            
            for i, chunk in enumerate(chunks):
                # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —á–∞–Ω–∫
                audio_data = await self.tts.synthesize_chunk(chunk)
                if audio_data:
                    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    audio_b64 = base64.b64encode(audio_data).decode('utf-8')
                    await self.send_message(user_id, {
                        "type": "audio_chunk",
                        "audio": audio_b64,
                        "chunk_index": i,
                        "total_chunks": len(chunks)
                    })
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
                    await asyncio.sleep(0.1)
                    
        except Exception as e:
            print(f"‚ùå TTS error for {user_id}: {e}")
            await self.send_message(user_id, {
                "type": "error",
                "message": "‚ùå Speech synthesis error"
            })
    
    async def process_cv_upload(self, user_id: str, filename: str, base64_data: str, candidate_info: dict = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CV –≤ PDF"""
        print(f"üìÑ Processing CV upload for {user_id}: {filename}")
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ
            pdf_data = base64.b64decode(base64_data)
            print(f"üìÑ PDF size: {len(pdf_data)} bytes")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
            cv_text = self._extract_pdf_text(pdf_data)
            
            if not cv_text:
                await self.send_message(user_id, {
                    "type": "cv_error",
                    "message": "Could not extract text from PDF"
                })
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º CV –∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_sessions:
                self.user_sessions[user_id]["cv_text"] = cv_text
                self.user_sessions[user_id]["candidate_info"] = candidate_info
            
            print(f"üìÑ CV extracted for {user_id}: {len(cv_text)} characters")
            print(f"üìÑ CV preview: {cv_text[:200]}...")
            
            if candidate_info:
                print(f"üë§ Candidate: {candidate_info.get('firstName')} {candidate_info.get('lastName')} ({candidate_info.get('email')})")
            
            await self.send_message(user_id, {
                "type": "cv_uploaded",
                "message": f"CV uploaded successfully ({len(cv_text)} characters)"
            })
            
        except Exception as e:
            print(f"‚ùå CV processing failed for {user_id}: {e}")
            import traceback
            traceback.print_exc()
            await self.send_message(user_id, {
                "type": "cv_error",
                "message": "Error processing CV"
            })

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
voice_bot = VoiceBotWebSocket()

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    query_params = dict(websocket.query_params)
    session_id = query_params.get('session_id')
    
    await voice_bot.connect(websocket, user_id, session_id)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            message = await websocket.receive_text()
            data = json.loads(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
            if user_id not in voice_bot.active_connections:
                print(f"‚ö†Ô∏è Ignoring message from disconnected user {user_id}")
                break
            
            print(f"üì® Received message from {user_id}: type={data.get('type')}")
            
            if data["type"] == "audio":
                print(f"üéµ Processing audio from {user_id}, size: {len(data['audio'])} chars")
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∏–∑ base64
                try:
                    audio_data = base64.b64decode(data["audio"])
                    print(f"üîì Decoded audio: {len(audio_data)} bytes")
                    await voice_bot.process_audio(user_id, audio_data)
                except Exception as e:
                    print(f"‚ùå Audio decode error: {e}")
                    await voice_bot.send_message(user_id, {
                        "type": "error",
                        "message": f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}"
                    })
                

                
            elif data["type"] == "ping":
                await voice_bot.send_message(user_id, {"type": "pong"})
                
            elif data["type"] == "audio_playback_complete":
                print(f"üîä Audio playback completed for {user_id}")
                
                # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω (timeout —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)
                if voice_bot.user_timeout_active.get(user_id, False):
                    current_stage = voice_bot.user_timeout_stage.get(user_id, 1)
                    print(f"üîä Timeout message playback completed for {user_id}, stage {current_stage-1}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç—Ä–µ—Ç—å—è —Å—Ç–∞–¥–∏—è (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é), –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                    if current_stage > 3:
                        print(f"üîö Interview ended for {user_id}, not starting new timeout")
                        return
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                    voice_bot.user_timeout_active[user_id] = False
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é —Ç–∞–π–º–µ—Ä–∞
                    print(f"üîä Starting timeout stage {current_stage} for {user_id}")
                    voice_bot.user_timeout_tasks[user_id] = asyncio.create_task(
                        voice_bot._timeout_handler(user_id)
                    )
                    voice_bot.user_timeout_active[user_id] = True
                else:
                    # –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–Ω–µ timeout —Å–æ–æ–±—â–µ–Ω–∏–µ)
                    print(f"üîä Starting new timeout for {user_id}")
                    await voice_bot.start_response_timeout(user_id)
                
    except WebSocketDisconnect:
        voice_bot.disconnect(user_id)
    except Exception as e:
        print(f"‚ùå WebSocket error: {e}")
        voice_bot.disconnect(user_id)

@app.post("/upload-cv")
async def upload_cv(
    cv_file: UploadFile = File(...),
    first_name: str = Form(...),
    last_name: str = Form(...),
    email: str = Form(...)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ CV –∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        allowed_types = [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ]
        if cv_file.content_type not in allowed_types:
            return JSONResponse(
                status_code=400,
                content={"error": "Only PDF and DOCX files are allowed"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
        contents = await cv_file.read()
        if len(contents) > 10 * 1024 * 1024:
            return JSONResponse(
                status_code=400,
                content={"error": "File size must be less than 10MB"}
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if cv_file.content_type == "application/pdf":
            cv_text = voice_bot._extract_pdf_text(contents)
            file_type = "PDF"
        elif cv_file.content_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            cv_text = voice_bot._extract_docx_text(contents)
            file_type = "DOCX"
        else:
            return JSONResponse(
                status_code=400,
                content={"error": "Unsupported file type"}
            )
        
        if not cv_text:
            return JSONResponse(
                status_code=400,
                content={"error": f"Could not extract text from {file_type} file"}
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
        session_id = f"session_{int(time.time())}_{hash(email)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        voice_bot.cv_sessions[session_id] = {
            "candidate_info": {
                "firstName": first_name,
                "lastName": last_name,
                "email": email
            },
            "cv_text": cv_text,
            "uploaded_at": time.time()
        }
        
        print(f"üìÑ CV uploaded for {first_name} {last_name} ({email})")
        print(f"üìÑ Session ID: {session_id}")
        print(f"üìÑ CV length: {len(cv_text)} characters")
        
        return JSONResponse(content={
            "success": True,
            "session_id": session_id,
            "message": f"CV uploaded successfully ({len(cv_text)} characters)",
            "candidate": {
                "firstName": first_name,
                "lastName": last_name,
                "email": email
            }
        })
        
    except Exception as e:
        print(f"‚ùå CV upload error: {e}")
        import traceback
        traceback.print_exc()
        return JSONResponse(
            status_code=500,
            content={"error": "Server error processing CV"}
        )

@app.get("/")
async def get_index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse("static/index.html")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "OK", "message": "Voice Bot API is running"}

@app.get("/test-components")
async def test_components():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ API"""
    results = {}
    
    try:
        # –¢–µ—Å—Ç STT (—Å –∑–∞–≥–ª—É—à–∫–æ–π)
        results["stt"] = "‚úÖ STT component initialized"
        
        # –¢–µ—Å—Ç LLM
        test_llm = OpenRouterClient()
        test_response = await test_llm.chat_completion("Say hello", voice_bot.system_prompt)
        results["llm"] = f"‚úÖ LLM response: {test_response[:50]}..."
        
        # –¢–µ—Å—Ç TTS
        chunks = voice_bot.tts.split_text_into_chunks("Hello world")
        results["tts"] = f"‚úÖ TTS chunks: {len(chunks)}"
        
    except Exception as e:
        results["error"] = f"‚ùå Component test failed: {str(e)}"
    
    return results

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("static", exist_ok=True)
    
    
    uvicorn.run(
        "websocket_api:app",
        host="0.0.0.0",
        port=8800,
        reload=True,
    ) 